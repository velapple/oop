// ConsoleApplication2.cpp: определ€ет точку входа дл€ консольного приложени€.
//
//ƒанный способ предполагает работу с динамической пам€тью. 
//ƒл€ представлени€ очереди используетс€ односв€зный список, в конец которого помещаютс€ новые элементы, а старые извлекаютс€, соответственно, из начала списка. 
//«десь каждый узел списка имеет два пол€: информационное и св€зующее

#include "stdafx.h"
#include <iostream>
using namespace std;
struct Node //описание узла списка
{
int data; //информационное поле
Node *next; //указатель на следующий элемент
};
struct Queue //описание очереди
{
int size; //счетчик размера очереди
Node *first; //указатель на начало очереди
Node *last; //указатель на конец очереди
};
void Creation(Queue *Q) //создание очереди
{
Q->first=new Node;
Q->first->next=NULL;
Q->last=Q->first;
Q->size=0;
}
bool Full(Queue *Q) //проверка очереди на пустоту
{
if (Q->first==Q->last) return true;
else return false;
}
int Top(Queue *Q) //вывод начального элемента
{ return Q->first->next->data; }
void Add(Queue *Q) //добавление элемента
{
int value;
cout<<"\nValue > "; cin>>value;
Q->last->next=new Node;
Q->last=Q->last->next;
Q->last->data=value; //добавление элемента в конец
Q->last->next=NULL; //обнуление указател€ на следующий элемент
Q->size++;
cout<<"\nElement has been added\n\n";
}
void Delete(Queue *Q) //удаление элемента
{
Q->first=Q->first->next; //смещение указател€
Q->size--;
cout<<"\nElement has been removed\n\n";
}
int Size(Queue *Q) //размер очереди
{ return Q->size; }
void clear(Queue *Q);// очистка очереди

void main(){ //главна€ функци€ 
Queue Que1;
Creation(&Que1);
char number;
do
{
cout<<"1. Add element"<<endl;
cout<<"2. Delete element"<<endl;
cout<<"3. Show top element"<<endl;
cout<<"4. Show queue size"<<endl;
cout<<"5. Clear queue"<<endl;
cout<<"0. End\n\n";
cout<<"Command number > "; cin>>number;
switch (number)
{
case '1': Add(&Que1);
break;
//-----------------------------------------------
case '2':
	if (Full(&Que1)) cout<<endl<<"Queue is empty\n\n";
	else Delete(&Que1);
break;
//-----------------------------------------------
case '3':
	if (Full(&Que1)) cout<<endl<<"Queue is empty\n\n";
	else { cout<<"\nFirst element is: "<<Top(&Que1)<<"\n\n"; }
break;
//-----------------------------------------------
case '4':
	if (Full(&Que1)) cout<<endl<<"Queue is empty\n\n";
	else cout<<"\nQueue size is: "<<Size(&Que1)<<"\n\n";
break;
//-----------------------------------------------
case '5':
if (Full(&Que1)) cout<<endl<<"Queue is empty\n\n";
	else while (!Full(&Que1)){Delete(&Que1);}; 
	cout<<"Queue was cleared.";
break;
//-----------------------------------------------
case '0': break;
default: cout<<endl<<"Undefined command\n\n";
break;
}
} while(number!='0');
system("pause");
}
